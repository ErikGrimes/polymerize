{"version":3,"sources":["javascript/javascript-parser.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;;AAEH,iCAAiC;AAGjC,0CAAiE;AAEjE,gDAAsE;AAEtE,+DAAyD;AAQzD;IACE,KAAK,CAAC,QAAgB,EAAE,GAAW,EAAE,UAA+B;QAElE,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC;QAC9B,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAC9B,IAAI,GAAY,CAAC;QACjB,MAAM,OAAO,GAAG;YACd,WAAW,EAAE,CAAC;YACd,aAAa,EAAE,IAAI;YACnB,OAAO,EAAE,IAAI;YACb,GAAG,EAAE,IAAI;YACT,UAAU,EAAE,QAAiC;SAC9C,CAAC;QAEF,IAAI,CAAC;YACH,GAAG,GAAY,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;QAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC;gBACH,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC9B,GAAG,GAAY,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACjD,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,EAAE,CAAC,CAAC,GAAG,YAAY,WAAW,CAAC,CAAC,CAAC;oBAC/B,MAAM,IAAI,kCAAwB,CAAC;wBACjC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACnC,QAAQ,EAAE,kBAAQ,CAAC,KAAK;wBACxB,IAAI,EAAE,aAAa;wBACnB,WAAW,EAAE,0BAAkB,CAC3B;4BACE,IAAI,EAAE,GAAG;4BACT,KAAK,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAC;4BACzD,GAAG,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAC;yBACxD,EACD,UAAU,CAAC,cAAc,CAAE;qBAChC,CAAC,CAAC;gBACL,CAAC;gBACD,MAAM,GAAG,CAAC;YACZ,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,wCAAkB,CAAC;YAC5B,GAAG;YACH,QAAQ;YACR,GAAG;YACH,cAAc,EAAE,UAAU,CAAC,cAAc;YACzC,OAAO,EAAE,UAAU,CAAC,OAAO,EAAE,QAAQ;YACrC,kBAAkB,EAAE,OAAO,CAAC,UAAU;SACvC,CAAC,CAAC;IACL,CAAC;CACF;AAhDD,4CAgDC","file":"javascript-parser.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as espree from 'espree';\nimport {Program} from 'estree';\n\nimport {correctSourceRange, InlineDocInfo} from '../model/model';\nimport {Parser} from '../parser/parser';\nimport {Severity, WarningCarryingException} from '../warning/warning';\n\nimport {JavaScriptDocument} from './javascript-document';\n\ndeclare class SyntaxError {\n  message: string;\n  lineNumber: number;\n  column: number;\n}\n\nexport class JavaScriptParser implements Parser<JavaScriptDocument> {\n  parse(contents: string, url: string, inlineInfo?: InlineDocInfo<any>):\n      JavaScriptDocument {\n    const isInline = !!inlineInfo;\n    inlineInfo = inlineInfo || {};\n    let ast: Program;\n    const options = {\n      ecmaVersion: 8,\n      attachComment: true,\n      comment: true,\n      loc: true,\n      sourceType: 'script' as ('script' | 'module'),\n    };\n\n    try {\n      ast = <Program>espree.parse(contents, options);\n    } catch (_ignored) {\n      try {\n        options.sourceType = 'module';\n        ast = <Program>espree.parse(contents, options);\n      } catch (err) {\n        if (err instanceof SyntaxError) {\n          throw new WarningCarryingException({\n            message: err.message.split('\\n')[0],\n            severity: Severity.ERROR,\n            code: 'parse-error',\n            sourceRange: correctSourceRange(\n                {\n                  file: url,\n                  start: {line: err.lineNumber - 1, column: err.column - 1},\n                  end: {line: err.lineNumber - 1, column: err.column - 1}\n                },\n                inlineInfo.locationOffset)!\n          });\n        }\n        throw err;\n      }\n    }\n\n    return new JavaScriptDocument({\n      url,\n      contents,\n      ast,\n      locationOffset: inlineInfo.locationOffset,\n      astNode: inlineInfo.astNode, isInline,\n      parsedAsSourceType: options.sourceType,\n    });\n  }\n}\n"]}