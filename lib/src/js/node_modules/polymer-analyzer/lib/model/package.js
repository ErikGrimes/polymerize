"use strict";
/**
 * Represents a queryable interface over all documents in a package/project.
 *
 * Results of queries will include results from all documents in the package, as
 * well as from external dependencies that are transitively imported by
 * documents in the package.
 */
class Package {
    constructor(documents, warnings) {
        const potentialRoots = new Set(documents);
        this._toplevelWarnings = warnings;
        // We trim down the set of documents as a performance optimization. We only
        // need a set of documents such that all other documents we're interested in
        // can be reached from them. That way we'll do less duplicate work when we
        // query over all documents.
        for (const doc of potentialRoots) {
            for (const imprt of doc.getByKind('import')) {
                // When there's cycles we can keep any element of the cycle, so why not
                // this one.
                if (imprt.document !== doc) {
                    potentialRoots.delete(imprt.document);
                }
            }
        }
        this._documents = potentialRoots;
    }
    getByKind(kind) {
        const result = new Set();
        for (const doc of this._documents) {
            addAll(result, doc.getByKind(kind));
        }
        return result;
    }
    getById(kind, identifier) {
        const result = new Set();
        for (const doc of this._documents) {
            addAll(result, doc.getById(kind, identifier));
        }
        return result;
    }
    getOnlyAtId(kind, identifier) {
        const results = this.getById(kind, identifier);
        if (results.size > 1) {
            throw new Error(`Expected to find at most one ${kind} with id ${identifier} ` +
                `but found ${results.size}.`);
        }
        return results.values().next().value || undefined;
    }
    /**
     * Get all features for all documents in the project or their imports.
     */
    getFeatures() {
        const result = new Set();
        for (const doc of this._documents) {
            addAll(result, doc.getFeatures(true));
        }
        return result;
    }
    /**
     * Get all warnings in the project.
     */
    getWarnings() {
        const result = new Set(this._toplevelWarnings);
        for (const doc of this._documents) {
            addAll(result, new Set(doc.getWarnings(true)));
        }
        return Array.from(result);
    }
}
exports.Package = Package;
function addAll(set1, set2) {
    for (const val of set2) {
        set1.add(val);
    }
    return set1;
}

//# sourceMappingURL=package.js.map
